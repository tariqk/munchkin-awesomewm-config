#+TITLE: Awesome Desktop Manager Configuration
#+AUTHOR: Tariq Kamal <github.t-boy@xoxy.net>
#+STARTUP: hidestars indent logdone
#+TODO: FIX-ME PLAN-ME FINISH-ME | CHECK-ME DONE 
#+PROPERTIES: tangle rc.lua

The main startup file for all the settings for the awesome desktop manager.

* Build environment
Notes, in case I get amnesia or something.

This file was built using:

- [[http://emacs.naquadah.org/][emacs 24, using the emacs-snapshot distribution]].
- [[http://www.orgmode.org][org-mode]], using org-babel.
- [[http://github.com/eschulte/emacs24-startup-kit][emacs-startup-kit]], Literate Programming edition.

* PLAN-ME Things to do [0/3]
Items to plan for, items to complete.

- [-] Orgify everything.
  - [X] Build the basic framework.
  - [-] /Properly/ document the file, not mindlessly mimic the comments.
    - [X] First segment :: Variable declarations and initial setup and startup.
    - [ ] Second segment :: Widgets and menu items and interface items.
    - [ ] Mystery segment :: Not really. It's got something to do with code that loads every time a client loads, and something to do with "sloppy focus".
  - [-] Figure out a workflow to output this as clean lua.
    - [X] Configure the in-buffer settings to point to rc.lua
    - [ ] Run the tangle command successfully.
    - [ ] Test out the resulting awesome configuration.
    - [ ] Start adding things in and reorganizing.
- [ ] Put this in the org-agenda.
- [ ] Customize
  - Widgets
    - What do I need?
      - Something to do with power.
      - Something to do with connectivity.
        - Look into running the wicd systray app in the background during startup.
  - Startup applications.
  - Additional functionality
    - Easy shutting down and restarting.
    - Hotkeys for commonly used apps:
      - Emacs
      - uzbl-tabbed
  - Wallpaper changing, using either:
    - [[http://www.reddit.com/][reddit]]'s earth-porn subreddit.
    - [[http://www.panorimio.com][panorimio]], preferably with a separate file to describe rects of interest.
    - JSON is involved in some way.

* The awesome settings.

This section contains the actual settings.

** Load the files.

Begin by loading the files required by awesome to function properly.

The following modules are loaded:

- awful :: not part of the core library, and yet required for some reason for awesome to function. Will find out, but later.
  + awful.autofocus ::
  + awful.rules :: 
- beautiful :: The default theme library. Moves all the custom code involving awesome's look and feel into a separate file. The locations of the theme files should be at [[file:/usr/share/awesome/themes/][awesome themes shared directory, at least for this system.]]
- naughty :: The notifications library.

#+begin_src lua
  require("awful")
  require("awful.autofocus")
  require("awful.rules")
  require("beautiful")
  require("naughty")
#+end_src

And then load external files needed to e.g. populate menu options etc.

I believe at this point the debian menu entries are automatically generated, apparently, so there's really no point in including them here, since the system mirrors the changes from its own internal processes. 

For more information, visit the [[file:/usr/share/doc/menu/html/index.html][relevant documentation on this local system]] for more info.

#+begin_src lua
  require("debian.menu")
#+end_src

** The Startup Process

*** Recovery from error.

This section apparently manages the awesome window manager in the event there is an error in the awesome configuration. I've never seen it work at all, though, since fucking up the configuration just means that when I login, awesome just dumps me back to the login screen, and I have to use the console to salvage the configuration file.

The original docstring indicates that there is a fallback configuration that awesome is supposed to execute in the event of startup failure. Not sure where that part is, in this code snippet. From all I can see it just executes a notification via naughty, and then... that's it. Weird.

#+begin_src lua
  if awesome.startup_errors then
      naughty.notify({ preset = naughty.config.presets.critical,
                       title = "Oops, there were errors during startup!",
                       text = awesome.startup_errors })
  end
#+end_src

This snippet supposedly handles problems that occur when your configuration is correct, but awesome has encountered some run-time errors after starting up. The code for this one is even more esoteric, and I've yet to figure it out. From all I can see, it does something with signals, and then displays an error notification.

This might actually be a do loop that runs endlessly, but that doesn't make any sense. I need to read up more on Lua's syntax and figure out what the =do...end= construct means, or if it's related to the previous snippet at all.

#+begin_src lua
  do
      local in_error = false
      awesome.add_signal("debug::error", function (err)
          -- Make sure we don't go into an endless error loop
          if in_error then return end
          in_error = true
  
          naughty.notify({ preset = naughty.config.presets.critical,
                           title = "Oops, an error happened!",
                           text = err })
          in_error = false
      end)
  end
#+end_src

*** Application startup.

Applications that need to run, like the compositor and other shell background daemons, can be summoned here by =awful.util.spawn_with_shell()=.

Right now, the following applications start up when awesome starts up:

- Unagi, a window compositor that ensures that both the emacs window and the uxrvt window remain transparent.

#+begin_src lua
awful.util.spawn_with_shell("unagi &")
#+end_src

*** Variable declarations.

Once that's done, define variables:

**** Load Theme File

This bit defines the theme file for loading. Right now it's at zenburn. The thought does cross my mind, though, that at some point the wallpaper will need changing. Must I /really/ muck around with the specific theme file? That feels kind of silly.

#+begin_src lua
beautiful.init("/usr/share/awesome/themes/zenburn/theme.lua")
#+end_src

**** Define default applications.

The first two lines of this are self-evident: this is where we define my preferred xterm application (in this case, rxvt-unicode, or =urxvt=), and the default editor (it's =nano= -- typing =editor= on the console loads it up; should really consider changing it to =emacs=, although "EMACS ALL THE THINGS!!!1" is just silly and absurd, so have second thoughts on it). Right now it's just variables, but it will get called later on.

An alternative idea would be to load the emacs server and figure out if there was a way to load files to the same emacs instance, or something. I don't want to end up having multiple instances of emacs running, especially on this piddly machine.

That third line is a +little mystifying+ less mystifying now, especially since it gets repeated several times afterwards in the configuration, +especially since I'm not familiar with the =..= operator+ and =..= is the string concatenation operator, as using =+= on strings is an error in lua. +Presumably it's string concatenation? If that's the case, then i+ It basically translates to =urxvt -e editor=.

#+begin_src lua
terminal = "urxvt"
editor = os.getenv("EDITOR") or "editor"
editor_cmd = terminal .. " -e " .. editor
#+end_src

This part defines modkey as the Windows key at this point. Like the previous section, it's still mostly variable assignments -- all the stuff gets run later on.

The devs recommend you keep it to =Mod4= (i.e. the Windows key), by the way, and if it bugs you, use =xmodmap=, not manually define it here. There may be clashes and weirdness abound, presumably because awesome can't really figure out what CTRL + CTRL + key is. Not that I can blame them.

#+begin_src lua
modkey = "Mod4"
#+end_src

The table of layouts is laid-out. Remember that lua's numbering scheme for tables is 1s-based, not 0s-based, which will throw off people and result in a hilarious number of off-by-one errors.

For netbooks with tiny screens like the device I'm writing in, stick to =awful.layout.suit.max=.

#+begin_src lua
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
#+end_src

Define tags here. You do it by continuously iterating from all active screens (assumption: =screen.count()= counts the number of iRL screens, not virtual desktops, which are tags are, I thought). TODO: read up the documentation: last visit though the docs look pretty sparse. Meh.

I tried to follow the awesome Right Wayâ„¢ of doing things, but it kept crashing my window manager. Might as well do it the dumb way, and define the tags manually, like an idiot. Works well, apparently, thus validating the need for idiocy, once in a while.

=layouts[9]= should refer to =awful.layout.suit.max=. It's the default for all the tags, because, like I said; tiny netbook screen. This is acceptable now; for all you large-screen people, choose something else.

#+begin_src lua
  tags = {}
  for s = 1, screen.count() do
      -- Each screen has its own tag table.
      tags[s] = awful.tag({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, s, layouts[9])
  end
#+end_src

*** Interface elements.

**** The Launcher Widget and Main Menu

This first section just defines the awesome menu entries and places them in a table. You see this a lot in awesome, it appears -- define the elements in a variable, and then run them directly. Might wish to do that for the tags, once I can suss out how the exact details are.

The commands are, to summarize:

- manual :: loads, currently, =urxvt -e man awesome=. This loads rxvt-unicode with the awesome man page, and terminates the window after it's done.
- edit config :: loads =urxvt -e terminal rc.lua=. =awesome.conffile= must be a built-in variable.
- restart :: restarts the awesome window manager.
- quit :: quits the awesome window manager and logs out.

I don't honestly see the utility of using these commands, since they're fiddly.

#+begin_src lua
  myawesomemenu = {
     { "manual", terminal .. " -e man awesome" },
     { "edit config", editor_cmd .. " " .. awesome.conffile },
     { "restart", awesome.restart },
     { "quit", awesome.quit }
  }
#+end_src

This one just wraps everything up in one big table, with the awesome menu, the Debian menu, and the open terminal menu option. Fairly standard, although the invocation to summon the Debian menu looks fairly clunky. =debian.menu.Debian_menu.Debian=? Yeesh.

#+begin_src lua
mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "Debian", debian.menu.Debian_menu.Debian },
                                    { "open terminal", terminal }
                                  }
                        })
#+end_src

This presumably gets awesome to finally launch everything. Turns out that launchers are considered widgets in awesome. Since there is apparently no such thing as a built-in launcher, it makes sense to just create a launcher category widget and go from there.

#+begin_src
mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
#+end_src

**** The wibox and system tray widgets

***** Widget definitions.

As seen so often in this configuration file, first you define your widget in a table, and then you summon it later. Saves on the messy coding, I suppose.

You begin by defining the widgets you plan to place in the wibox, which is basically that bit that's on top of the screen, with the tags and the awesome "a" icon and so forth. Current wibox-widgets are:

- a text clock :: from =awful.widget.textclock()=, this loads a text clock that aligns to the right of the wibox. Places it in =mytextclock=.
- a system tray :: from... apparently the core awesome widget library? I don't recall seeing the widget defined in the earlier part of this config file. Defines a systray and places it in =mysystray=.

#+begin_src lua
mytextclock = awful.widget.textclock({ align = "right" })
mysystray = widget({ type = "systray" })
#+end_src

***** FIX-ME Widget invocations

****** Define the wibox widgets and other things.

The first part of this appears to be more definitions, but it appears to define the following elements that need to appear in every screen:

- One wibox
- One prompt box
- A layoutbox, which shows what the current layout is.
- A tags list.
- A tasks list (moved from just before the tasks lists buttons were defined).

#+begin_src lua
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytasklist = {}
#+end_src

****** How buttons interact with the wibox items

The next section appears to define how items in the wibox react to being clicked on with mouse buttons.

******* FIX-ME The Tags List

The tags list has an element called buttons, which, I believe, define what each mouse button does when you click on the tag with that specific mouse button. Only =button1= (i.e. the left mouse button) and =button1+Mod4= are really worth anything at this point, since my mouse doesn't have button 3, 4 or 5 (I'm using a trackpad, anyway).

#+begin_src lua
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
#+end_src

******* FIX-ME The tasks lists

The same goes for tasks lists, which define functions that are run when you press a mouse button on a specific task. It appears that only =button1= is really usable on this machine, so one possible thing we can do is delete the other options.

Of course, this is a great demonstration of lua's ability to place functions within tables, similar with how Python treats functions as well. Shame it's so damn verbose and ugly, with the function definitions being defined /within/ the behavioural definitions as well, which shouldn't really be happening. I think you could /really/ just separate the whole thing for cleaner, less klugey-looking code.

#+begin_src lua
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))
#+end_src

******* FIX-ME Laying It All Together. 

Of course, once you've done everything, it's time to lay everything out. We of course use a for loop to iterate to every screen (which you can count using the =screen.count()=  function).

Interestingly enough, the layout box functions are defined on a per-screen basis, unlike the tasks lists or the tags lists. The colon notation seen in =mylayoutbox[s]:buttons...= is particularly interesting, since I have never seen it before and scarcely know what it means and why it's significant.

I'm leery of splitting up the for loop to go through each individual piece, so until I find a better solution, this stays.

One possible solution would be to put everything into a function, and every screen, just run that function. The function can just be annotated and split off into more sub-functions, since this section just sees so much repeated code, it's annoying.

That might just be the next to-do.

#+begin_src lua
for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        mylayoutbox[s],
        mytextclock,
        s == 1 and mysystray or nil,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
#+end_src

**** Input devices.

***** FIX-ME Mouse bindings

This looks more than necessary and ripe for pruning.

Actually, I think I could remove /everything/ and nothing of value could be lost. The awesome config has an allergy for defining actions for =button2=, though. Am I missing something?

#+begin_src lua
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
#+end_src

***** FIX-ME Keyboard bindings

****** Global keys

When I discovered what was happening here, that was a little annoying.

In any case, the following sections are a little different, in that we finally incorporate org-babel's [[http://orgmode.org/manual/Noweb-reference-syntax.html][org-babel's noweb reference syntax]]. We have to, because the =globalkeys= definitions is HUEG. On the plus side, once I've managed to get it working, I think we have a pretty powerful tool to dissect other, cumbersome but indivisible sections.

Just so you know, the blocks that do refer to each segment are currently set with =:tangle no= options. That should prevent them from being written to the output file before they're ready.

To reiterate: we'll talk about what the keys are specifically doing, and /then/ after all that we'll include the final code. That's how it goes.

******* The focus keys

The first set of keys

- Movement between tags (=Mod4+left=, =Mod4+right=)
- App focus (=Mod4+j=, =Mod4+k=)
- Loading the awesome menu (=Mod4+w=). This also steals keyboard focus to the menu, which is more useful than annoying, especially since it removes the need to move your fingers off the keyboard.
- Some kind of weird-ass mystery key (What does =Mod4+ESC= do? Look up that function, =awful.tag.history.restore=)

#+name: focus-keys
#+begin_src lua :tangle no
      awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
      awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
      awful.key({ modkey,           }, "Escape", awful.tag.history.restore),
  
      awful.key({ modkey,           }, "j",
          function ()
              awful.client.focus.byidx( 1)
              if client.focus then client.focus:raise() end
          end),
      awful.key({ modkey,           }, "k",
          function ()
              awful.client.focus.byidx(-1)
              if client.focus then client.focus:raise() end
          end),
      awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),
#+end_src

******* Layout Manipulation

The layout manipulation keys. Quick glance, it basically does:

- Focus-related stuff (=Mod4+CTRL+j= and =Mod4+CTRL+k=).
- Layout-swapping stuff (=Mod4+Shift+j= and =Mod4+Shift+k=) -- useful if you have a large screen.
- Some other focus-and-other stuff related things (look up what =awful.client.urgent.jumpto= does, and try out the =TAB= functionality)

#+name: layout-manipulation
#+begin_src lua :tangle no
      awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
      awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
      awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
      awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
      awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
      awful.key({ modkey,           }, "Tab",
          function ()
              awful.client.focus.history.previous()
              if client.focus then
                  client.focus:raise()
              end
          end),
#+end_src lua

******* Standard Applications & Functionality

The first section is sort of self-explanatory: keys for loading the terminal window, keys to restart and quit awesome. So far, so good.

#+name: standard-actions
#+begin_src lua :tangle no
      awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
      awful.key({ modkey, "Control" }, "r", awesome.restart),
      awful.key({ modkey, "Shift"   }, "q", awesome.quit),
  
#+end_src

These commands I'm not so sure. They use vim movement keys (=h j k l=), so presumably they have something to do with focus or layout manipulation. If so, I don't know how relevant they are to the interests of my tiny, tiny screen.

=Mod4+SPACE= and =Mod4+Shift+SPACE= are familiar, though, although totally irrelevant to my tiny, tiny screen. Might serve useful in the event of me needing to use an attached screen.

#+name: more-focus-keys
#+begin_src lua :tangle no
      awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
      awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
      awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
      awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
      awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
      awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
      awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
      awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),
#+end_src

This one restores minimized windows, that's for sure.

#+name: restore-minimized-windows
#+begin_src lua :tangle no
      awful.key({ modkey, "Control" }, "n", awful.client.restore),
#+end_src

Keys related to messing about with the prompt. =Mod4+r= to run stuff, =Mod4+x= to run lua code, presumably for debugging and development. The results are placed in the cache directory, under =history_eval=.

#+name: prompt-keys
#+begin_src lua :tangle no
      awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),
  
      awful.key({ modkey }, "x",
                function ()
                    awful.prompt.run({ prompt = "Run Lua code: " },
                    mypromptbox[mouse.screen].widget,
                    awful.util.eval, nil,
                    awful.util.getdir("cache") .. "/history_eval")
                end)
#+end_src  

******* Putting it all together.

And now, the finale:

#+begin_src lua
    globalkeys = awful.util.table.join(
    <<focus-keys>>
    <<layout-manipulation>>
    <<standard-actions>>
    <<more-focus-keys>>
    <<restore-minimized-windows>>
    <<prompt-keys>>
  )
#+end_src

Phew! Also, sheesh.

****** Client-specific keys

These are client (i.e. pertaining to the currently-running app) specific commands. Implementation is... interesting. 

It's all stuffed into a table, which then gets referenced in the window-rules section (the empty rule, which applies to all windows).

#+begin_src lua
  clientkeys = awful.util.table.join(
      awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
      awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
      awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
      awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
      awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
      awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
      awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
      awful.key({ modkey,           }, "n",
          function (c)
              -- The client currently has the input focus, so it cannot be
              -- minimized, since minimized clients can't have the focus.
              c.minimized = true
          end),
      awful.key({ modkey,           }, "m",
          function (c)
              c.maximized_horizontal = not c.maximized_horizontal
              c.maximized_vertical   = not c.maximized_vertical
          end)
  )
#+end_src

****** Getting tags to work properly on all keyboards

This segment is particularly strange, but I think I understand why, even though I don't fully grok /how/ it's done. It's used to ensure that the commands work no matter what key layout you use. Check the comments; I'll be annotating this properly later.

#+begin_src lua
  -- Compute the maximum number of digit we need, limited to 9
  keynumber = 0
  for s = 1, screen.count() do
     keynumber = math.min(9, math.max(#tags[s], keynumber));
  end
  
  -- Bind all key numbers to tags.
  -- Be careful: we use keycodes to make it works on any keyboard layout.
  -- This should map on the top row of your keyboard, usually 1 to 9.
  for i = 1, keynumber do
      globalkeys = awful.util.table.join(globalkeys,
          awful.key({ modkey }, "#" .. i + 9,
                    function ()
                          local screen = mouse.screen
                          if tags[screen][i] then
                              awful.tag.viewonly(tags[screen][i])
                          end
                    end),
          awful.key({ modkey, "Control" }, "#" .. i + 9,
                    function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewtoggle(tags[screen][i])
                        end
                    end),
          awful.key({ modkey, "Shift" }, "#" .. i + 9,
                    function ()
                        if client.focus and tags[client.focus.screen][i] then
                            awful.client.movetotag(tags[client.focus.screen][i])
                        end
                    end),
          awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                    function ()
                        if client.focus and tags[client.focus.screen][i] then
                            awful.client.toggletag(tags[client.focus.screen][i])
                        end
                    end))
  end
  
  clientbuttons = awful.util.table.join(
      awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
      awful.button({ modkey }, 1, awful.mouse.client.move),
      awful.button({ modkey }, 3, awful.mouse.client.resize))
#+end_src

And then, set them:

#+begin_src luq
-- Set keys
root.keys(globalkeys)
-- }}}
#+end_src

**** PLAN-ME Window rules

+Don't rightly understand this. Need to plan on commenting this properly.+

I get it now. =awful.rules.rules= is supposed to contain a series of entries, of which entry consists of a hash table with two properties: =rule= and =properties=. When rule is blank (as it is for =awful.rules.rules[1]=), then it applies to every window. Useful when you want to make sure the window matches the theme being used.

Almost of the entries are for programs I don't really intend to use, though. Hmm. The Firefox one even /looks/ annoying.

#+begin_src lua
  awful.rules.rules = {
      { rule = { },
        properties = { border_width = beautiful.border_width,
                       border_color = beautiful.border_normal,
                       focus = true,
                       keys = clientkeys,
                       buttons = clientbuttons } },
      { rule = { class = "MPlayer" },
        properties = { floating = true } },
      { rule = { class = "pinentry" },
        properties = { floating = true } },
      { rule = { class = "gimp" },
        properties = { floating = true } },
      -- Set Firefox to always map on tags number 2 of screen 1.
      -- { rule = { class = "Firefox" },
      --   properties = { tag = tags[1][2] } },
  }
#+end_src

**** FIX-ME Other things.

I don't know where to start. Just put in the framework, seeing if I can find more solutions.

#+begin_src lua
-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
#+end_src
